package com.goodworkalan.diffuse;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

/**
 * Converts a map by creating a copy of the map and diffusing the entry values.
 *
 * @author Alan Gutierrez
 */
public class MapDiffuser implements ObjectDiffuser {
    /** The singleton map converter instnace. */
    public final static MapDiffuser INSTANCE = new MapDiffuser();

    /**
     * Create a copy of the given map object diffusing the entries using the
     * objects diffusers obtained from the given object diffuser provider.
     * <p>
     * For each entry of the map, the key name is appended to the object path
     * after appending a dot, to create a dot separated path to the member in
     * the object graph. If the diffuser for the member value is not a container
     * diffuser, the diffused value is included in the copy of the map. If the
     * diffuser for the member value is a container diffuser, the diffused value
     * is included if the amended path is in the set of paths to include, or if
     * the set of paths to include is empty. The object diffuser for each member
     * is called with the amended path to reflect the path of the object to
     * diffuse.
     * 
     * @param diffuser
     *            The object diffuser provider.
     * @param object
     *            The class to diffuse.
     * @param path
     *            The path of the object in the object graph.
     * @param includes
     *            The set of paths to include in the diffused object graph or an
     *            empty set to include all paths.
     * @exception ClassCastException
     *                If the given object is not a <code>java.util.Map</code>.
     * @see #diffuse(Diffuser, Object, StringBuilder, Set)
     */
    public Object diffuse(Diffuser diffuser, Object object, StringBuilder path, Set<String> includes) {
        return Collections.unmodifiableMap(modifiable(diffuser, object, path, includes));
    }

    /**
     * Convert the given map object into map that can be modified, unlike the
     * unmodifiable map generated by the <code>diffuse</code> method. Used by
     * derived classes to obtain a map that can be amended by their
     * implementation of <code>diffuse</code>.
     * 
     * @param diffuser
     *            The object diffuser provider.
     * @param object
     *            The class to diffuse.
     * @param path
     *            The path of the object in the object graph.
     * @param includes
     *            The set of paths to include in the diffused object graph or an
     *            empty set to include all paths.
     * @exception ClassCastException
     *                If the given object is not a <code>java.util.Map</code>.
     * @see #diffuse(Diffuser, Object, StringBuilder, Set)
     */
    public Map<String, Object> modifiable(Diffuser diffuser, Object object, StringBuilder path, Set<String> includes) {
        int index = path.length();
        Map<?, ?> original = (Map<?, ?>) object;
        Map<String, Object> copy = new LinkedHashMap<String, Object>();
        for (Map.Entry<?, ?> entry : original.entrySet()) {
            String name = entry.getKey().toString();
            path.append(name);
            Object value = entry.getValue();
            if (value == null) {
                copy.put(name, value);
            } else {
                ObjectDiffuser converter = diffuser.getConverter(value.getClass());
                if (!converter.isContainer() || includes.isEmpty() || includes.contains(path.toString())) {
                    path.append(".");
                    copy.put(name, converter.diffuse(diffuser, value, path, includes));
                }
            }
            path.setLength(index);
        }
        return copy;
    }
    
    /**
     * Return true indicating that this is a diffuser for containers of other
     * objects and not a scalar.
     * 
     * @return True to indicate that this is a container diffuser.
     */
    public boolean isContainer() {
        return true;
    }
}
