package com.goodworkalan.diffuse;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

// TODO Document.
public class MapDiffuser implements ObjectDiffuser {
    // TODO Document.
    public final static MapDiffuser INSTANCE = new MapDiffuser();

    // TODO Document.
    public Object diffuse(Diffuser diffuse, Object object, StringBuilder path, Set<String> includes) {
        return Collections.unmodifiableMap(modifiable(diffuse, object, path, includes));
    }

    /**
     * Convert the given map object into <code>java.util.Map</code> that can be
     * modified, unlike the unmodifiable map generated by the
     * <code>diffuse</code> method.
     * 
     * @param diffuser
     * @param object
     * @param path
     * @param includes
     * @return An unmodifiable map with an entry for each entry in the diffused
     *         map that is either a scalar property or a container included in
     *         the diffusion.
     * @exception ClassCastException
     *                If the given object is not a <code>java.util.Map</code>.
     * @see #diffuse(Diffuser, Object, StringBuilder, Set)
     */
    public Map<String, Object> modifiable(Diffuser diffuser, Object object, StringBuilder path, Set<String> includes) {
        int index = path.length();
        Map<?, ?> original = (Map<?, ?>) object;
        Map<String, Object> copy = new LinkedHashMap<String, Object>();
        for (Map.Entry<?, ?> entry : original.entrySet()) {
            String name = entry.getKey().toString();
            path.append(name);
            Object value = entry.getValue();
            if (value == null) {
                copy.put(name, value);
            } else {
                ObjectDiffuser converter = diffuser.getConverter(value.getClass());
                if (!converter.isContainer() || includes.isEmpty() || includes.contains(path.toString())) {
                    path.append(".");
                    copy.put(name, converter.diffuse(diffuser, value, path, includes));
                }
            }
            path.setLength(index);
        }
        return copy;
    }
    
    // TODO Document.
    public boolean isContainer() {
        return true;
    }
}
